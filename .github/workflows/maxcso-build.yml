# Requires repo secret: PERSONAL_ACCESS_TOKEN with permissions:
#   Contents: read and write
#   Pull Requests: read and write

name: maxcso Build

on:
  workflow_dispatch:
    inputs:
      maxcso_ref:
        description: 'maxcso GitHub branch, tag, or SHA (e.g. "v1.13.0")'
        required: true
        type: string
      auto-merge:
        description: 'Auto-merge pull request?'
        required: true
        type: boolean
        default: true
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-linux:
    name: build-linux ${{ matrix.nodejs_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - docker_image: i386/ubuntu:latest
            docker_arch: linux/386
            nodejs_arch: ia32
          - docker_image: ubuntu:latest
            docker_arch: linux/amd64
            nodejs_arch: x64
          - docker_image: ubuntu:latest
            docker_arch: linux/arm/v7
            nodejs_arch: arm
          - docker_image: ubuntu:latest
            docker_arch: linux/arm64/v8
            nodejs_arch: arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: unknownbrackets/maxcso
          ref: ${{ env.MAME_REF }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v2
      - run: |
          {
            echo "#!/usr/bin/env bash"
            echo "set -euo pipefail"

            echo "apt-get update"
            echo "apt-get install -y build-essential pkgconf zlib1g-dev liblz4-dev libuv1-dev file"
            echo "make -j$(nproc)"
            echo "file maxcso"

            echo "apt-get install -y binutils"
            echo "ls -al maxcso"
            echo "strip maxcso"
            echo "ls -al maxcso"
          } > "build.sh"
          chmod +x build.sh
#      - uses: addnab/docker-run-action@v3
#        with:
#          image: ${{ matrix.docker_image }}
#          options: |
#            --platform ${{ matrix.docker_arch }}
#            --volume ${{ github.workspace }}:/build
#            --workdir /build
#          run: ./build.sh
#      - run: |
#          file ${{ github.workspace }}/maxcso
      - run: |
          docker pull --platform "${DOCKER_ARCH}" "${DOCKER_IMAGE}"
          docker run --rm \
            --platform "${DOCKER_ARCH}" \
            --volume "$(pwd):/build" \
            --workdir "/build" \
            "${DOCKER_IMAGE}" \
            ./build.sh
          file maxcso
        env:
          DOCKER_IMAGE: ${{ matrix.docker_image }}
          DOCKER_ARCH: ${{ matrix.docker_arch }}
      - name: Rename binary
        run: |
          dir="artifacts/packages/maxcso-linux-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv maxcso "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/**/maxcso
          if-no-files-found: error

  build-macos:
    name: build-macos ${{ matrix.nodejs_arch }}
    strategy:
      matrix:
        include:
          - os: macos-13
            nodejs_arch: x64
          - os: macos-14
            nodejs_arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: unknownbrackets/maxcso
          ref: ${{ env.MAME_REF }}
      - name: Install dependencies
        run: brew install --overwrite lz4 libuv libdeflate
      - name: Build
        run: |
          make "-j$(sysctl -n hw.physicalcpu)"
          file maxcso
      - name: Strip binary
        run: |
          ls -al maxcso
          strip maxcso
          ls -al maxcso
      - name: Rename binary
        run: |
          dir="artifacts/packages/maxcso-darwin-${{ matrix.nodejs_arch }}"
          mkdir -p "${dir}"
          mv maxcso "${dir}/"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_arch }}-${{ github.sha }}
          path: artifacts/**/maxcso
          if-no-files-found: error

  build-windows:
    name: build-windows ${{ matrix.nodejs_arch }}
    strategy:
      matrix:
        include:
          - platform: x64
            nodejs_arch: x64
          - platform: Win32
            nodejs_arch: ia32
    # Note: various .vcxproj files require v141_xp, which is why this isn't latest
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          repository: unknownbrackets/maxcso
          ref: ${{ env.MAME_REF }}
      - uses: microsoft/setup-msbuild@v2
      - name: Build
        run: |
          msbuild cli/maxcso.sln -maxcpucount /property:Configuration=Release "/property:Platform=${{ matrix.platform }}"
          cmd /r dir /q
#      - name: Strip binary
#        run: |
#          ls -al maxcso.exe
#          strip maxcso.exe
#          ls -al maxcso.exe
      - name: Rename binary
        run: |
          $Dir = "artifacts\packages\maxcso-win32-${{ matrix.nodejs_arch }}"
          mkdir "$Dir"
          mv maxcso*.exe "$Dir\maxcso.exe"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.platform }}-${{ github.sha }}
          path: artifacts/**/maxcso.exe
          if-no-files-found: error

  git-update:
    needs:
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - uses: actions/setup-node@v4
      - id: bump-and-commit
        run: |
          package_name=$(jq --raw-output '.name' package.json)
          major_version=$(npm show "${package_name}" --json | jq --raw-output '.versions | .[]' | sed 's/\.[0-9]*//g' | sort | tail -1)
          # shellcheck disable=SC2001
          minor_version=$(echo "${MAME_REF}" | sed 's/[^0-9]*//g' | sed 's/^0*//')
          previous_version=$(npm show "${package_name}" --json | jq --raw-output '.versions | .[]' | grep "${minor_version}" | tail -1)
          if [[ "${previous_version}" != "" ]]; then
            # shellcheck disable=SC2001
            new_patch_version=$(echo "$(echo "${previous_version}" | sed 's/[0-9]*\.//g') + 1" | bc)
            new_version="${major_version}.${minor_version}.${new_patch_version}"
          else
            new_version="${major_version}.${minor_version}.0"
          fi
          lerna version "${new_version}" --yes || true

          chmod +x packages/maxcso-*-*/maxcso*
          ls -alR
          git add package*.json lerna.json packages

          USER_EMAIL="${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          echo "USER_EMAIL=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"
          git config --global user.email "${USER_EMAIL}"

          USER_NAME="$(gh api "/users/${GITHUB_ACTOR}" | jq .name -r)"
          echo "USER_NAME=${USER_NAME}" >> "${GITHUB_OUTPUT}"
          git config --global user.name "${USER_NAME}"

          PACKAGE_VERSION="$(jq --raw-output '.version' package.json)"
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> "${GITHUB_OUTPUT}"
          git commit -m "v${PACKAGE_VERSION}"
        env:
          GH_TOKEN: ${{ github.token }}
      # Create the pull request, and optionally mark it as auto-merge
      - id: create-pull-request
        uses: peter-evans/create-pull-request@v6
        with:
          # GitHub won't run workflows off of events from the `github-actions` user
          # But also, I want the PR to be created under my name for cosmetic reasons
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          author: ${{ steps.bump-and-commit.outputs.USER_NAME }} <${{ steps.bump-and-commit.outputs.USER_EMAIL }}>
          branch: ${{ github.actor }}/${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}
          delete-branch: true
          title: v${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}
          assignees: ${{ !inputs.auto-merge && github.repository_owner || '' }}
          reviewers: ${{ (!inputs.auto-merge && github.repository_owner != github.actor) && github.repository_owner || '' }}
      - if: ${{ steps.create-pull-request.outputs.pull-request-number }}
        run: |
          {
            echo "# v${{ steps.bump-and-commit.outputs.PACKAGE_VERSION }}"
            echo ""
            echo "${{ steps.create-pull-request.outputs.pull-request-url }}"
          } >> "${GITHUB_STEP_SUMMARY}"
      - if: ${{ steps.create-pull-request.outputs.pull-request-number && inputs.auto-merge }}
        run: gh pr merge "${{ steps.create-pull-request.outputs.pull-request-number }}" --squash --auto
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
